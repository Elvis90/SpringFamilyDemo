package com.elvis.demo;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.joda.money.CurrencyUnit;
import org.joda.money.Money;
import org.mybatis.generator.api.MyBatisGenerator;
import org.mybatis.generator.config.Configuration;
import org.mybatis.generator.config.xml.ConfigurationParser;
import org.mybatis.generator.internal.DefaultShellCallback;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.EnableAspectJAutoProxy;

import com.elvis.demo.mapper.CoffeeMapper;
import com.elvis.demo.mapper.CoffeeOrderMapper;
//import com.elvis.demo.model.Coffee;
//import com.elvis.demo.model.CoffeeExample;
//import com.elvis.demo.model.CoffeeExample.Criteria;
import com.elvis.demo.model.Coffee;
import com.elvis.demo.model.CoffeeExample;
import com.elvis.demo.model.CoffeeOrder;
import com.elvis.demo.model.OrderState;
import com.elvis.demo.service.CoffeeOrderService;
import com.elvis.demo.service.CoffeeService;

import lombok.extern.slf4j.Slf4j;

@SpringBootApplication
@MapperScan("com.elvis.demo.mapper")
@Slf4j
@EnableCaching(proxyTargetClass=true)
@EnableAspectJAutoProxy
public class MybatisMyDemoApplication implements CommandLineRunner{

	@Autowired
	CoffeeMapper coffeeMapper;
	@Autowired
	CoffeeService cs;
	@Autowired
	CoffeeOrderService cos;
	public static void main(String[] args) {
		SpringApplication.run(MybatisMyDemoApplication.class, args);
	}
	


	@Override
	public void run(String... args) throws Exception {
		//generateArtifacts();
		//showmybatis();
		//测试缓存
		System.out.println(cs.getMenu().size());
		cs.creatCoffee("王水", Money.of(CurrencyUnit.of("CNY"), 18.50));
		for (int i = 0; i < 10; i++) {
			System.out.println(cs.getMenu().size());
		}
		cs.reload();
		System.out.println(cs.getMenu().size());
		
		/*
		List<CoffeeOrder> list = cos.getOrderByCustomer("周杰伦");
		list.forEach(c->System.out.println(c));
		cos.updateStatus(OrderState.TAKEN, list.get(0).getId());*/
	}

	private void generateArtifacts() throws Exception {
		List<String> warnings = new ArrayList<>();
		ConfigurationParser cp = new ConfigurationParser(warnings);
		Configuration config = cp.parseConfiguration(
				this.getClass().getResourceAsStream("/generatorConfig.xml"));
		DefaultShellCallback callback = new DefaultShellCallback(true);
		MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings);
		myBatisGenerator.generate(null);
	}
	
	private void showmybatis() {
		Coffee jt = new Coffee().withName("黑糖玛奇朵").withPrice(Money.of(CurrencyUnit.of("CNY"),30.5)).withCreateTime(new Date());
		coffeeMapper.insertSelective(jt);
		CoffeeExample coffeeExample = new CoffeeExample();
		coffeeExample.createCriteria().andPriceBetween(Money.of(CurrencyUnit.of("CNY"),20), Money.of(CurrencyUnit.of("CNY"),40));
		List<Coffee> list = coffeeMapper.selectByExample(coffeeExample);
		list.forEach(o->log.info("res:{}",o));
	}

}
